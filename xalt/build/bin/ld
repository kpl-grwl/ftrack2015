#!/bin/bash
#-*- shell-script -*-
#
#  MAGIC_STRING__XALT__XALT__MAGIC_STRING
#
# Git Version: @git@

#-----------------------------------------------------------------------
# XALT: A tool that tracks users jobs and environments on a cluster.
# Copyright (C) 2013-2014 University of Texas at Austin
# Copyright (C) 2013-2014 University of Tennessee
# 
# This library is free software; you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as
# published by the Free Software Foundation; either version 2.1 of 
# the License, or (at your option) any later version. 
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser  General Public License for more details. 
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free
# Software Foundation, Inc., 59 Temple Place, Suite 330,
# Boston, MA 02111-1307 USA
#-----------------------------------------------------------------------

##########################################################################
#
# ld wrapper: Add XALT "scribble" to executable or shared library.
#             Then run real ld, with trace.  Save the link trace
#             into an XALT link record.
#
##########################################################################

XALT_DIR=/nics/d/home/kagrawa1/xalt/build
DIRNAME=/usr/bin/dirname
BASENAME=/usr/bin/basename
READLINK=/usr/bin/readlink
MY_NAME=$($BASENAME $0)
MY_DIR=$($DIRNAME $($READLINK -f $0))

source $MY_DIR/xalt_helper_functions.sh

##########################################################################
# Check for user requested tracing.
request_tracing "$@"  # This returns ${argA[@]} and XALT_TRACING=yes/no


########################################################################
# Search for the command  and make sure that you don't find this one.

EXEC_X=/usr/bin/${MY_NAME}.x
find_real_command $0 $EXEC_X # this command sets $MY_CMD

########################################################################
# Make sure that the python setup is valid. 

find_working_python  # This function sets MY_PYTHON

########################################################################
# Loop over command line arguments to ld. This code is used instead of
# getopt and others because this wrapper script should not try to know
# all the options to ld. Instead we are just "cherry-picking" the options
# we want to know about.

EXEC="a.out"
append=false
prev=
done=false
for option
do
  if [ -n "$prev" ]; then
    eval "$prev=\$option"
    prev=
    continue
  fi

  case "$option" in
    -*=*) optarg=`builtin echo "$option" | sed  's/[-_a-zA-Z0-9]*=//'` ;;
    -*) optarg=;;
    *) optarg=; done=true;;
  esac
  
  case $option in
    --version|-v|--help)
      $MY_CMD "${argA[@]}"
      exit $?
      ;;
    --trace|-t)
      USER_TRACE="true"
      ;;

    -o)
      prev='EXEC'
      ;;
  esac

  #####################################################################
  # This code below is commented out.  Since this script is not parsing
  # all options the done flag won't work.

  #if [ "$done" = "true" ]; then
  #  break;
  #fi

done

XALT_LIBEXEC_DIR=$XALT_DIR/libexec
XALT_SITE_DIR=$XALT_DIR/site
GEN_ASSEMBLY=$XALT_LIBEXEC_DIR/xalt_generate_assembly.py
GEN_LINKDATA=$XALT_LIBEXEC_DIR/xalt_generate_linkdata.py
SYS_HOST_CMD=$XALT_SITE_DIR/xalt_syshost_default.py
SYSHOST=$($MY_PYTHON $SYS_HOST_CMD)
UUIDGEN=/usr/bin/uuidgen
RM=/bin/rm
AS=/usr/bin/as
CAT=/bin/cat
MKDIR=/bin/mkdir
GREP=/usr/bin/grep

UUID=`$UUIDGEN`
DATESTR=`date +%Y_%m_%d_%H_%M_%S`
WRKDIR=/tmp/${USER}_${DATESTR}_${UUID}
LINKLINE_OUT=$WRKDIR/link.txt
LINKLINE_ERR=$WRKDIR/link.err
ARGSRC=$WRKDIR/xalt.s
ARGOBJ=$WRKDIR/xalt.o
RESULT=$HOME/.xalt.d/link.${SYSHOST}.${DATESTR}.$UUID.json
FUNCRAW=$WRKDIR/func.txt                                        # ftrack2015
FUNCLIST=$WRKDIR/funclist.txt                                   # ftrack2015

if [ ! -d $WRKDIR ]; then
  $MKDIR -p $WRKDIR
fi

EPOCH=$($MY_PYTHON "$GEN_ASSEMBLY" "$UUID" "$SYSHOST" "$ARGSRC")

#
# If the $ARGSRC exists then build it
# otherwise don't try to link with it.
OBJ=$ARGOBJ
if [ -f "$ARGSRC" ]; then
  $AS $ARGSRC -o $OBJ
else
  OBJ=""
fi

#Save python state
py_path_xalt=$PYTHONPATH
py_home_xalt=$PYTHONHOME
export PYTHONPATH=$py_path_orig
[ -n "$py_home_orig" ] && export PYTHONHOME=$py_home_orig

#                                                               ftrack2015 Start >> 
# Function Tracking: Do an intential failed link 
# (minus libraries) to get function calls 
#

export ARGV=${argA[*]}

NEWARGV=`$XALT_LIBEXEC_DIR/xalt_strip_libs.py`

$MY_CMD $NEWARGV --unresolved-symbols=report-all -o /dev/null > $FUNCRAW 2>&1

cat $FUNCRAW | while read line 
do
	getfunc=$(echo $line | awk '{print $5}' | sed s/.//1)
	echo $getfunc | awk -F\' '{print $1}' | sed '/^$/d' >> $FUNCLIST
done
echo $FUNCLIST
#                                                               ftrack2015 Ends <<

tracing_msg $MY_CMD "${argA[@]}"

$MY_CMD "${argA[@]}" $OBJ -t > $LINKLINE_OUT 
status=$?

#Return python state
export PYTHONPATH=$py_path_xalt
unset  PYTHONHOME
[ -n "$py_home_xalt" ] && export PYTHONHOME=$py_home_xalt

if [ -n "$USER_TRACE" ]; then
  $CAT $LINKLINE_OUT | $GREP -v $ARGOBJ
fi

# ftrack2015 << added FUNCLIST arguement >>
echo $FUNCLIST
$MY_PYTHON "$GEN_LINKDATA" "$UUID" "$status" "`pwd`" "$SYSHOST" "$EXEC" "$ARGOBJ" "$EPOCH" "$LINKLINE_OUT" "$FUNCLIST" "$RESULT"

if [ "$?" = 0 -a -n "${XALT_LD_DEBUG:-}" ]; then
   builtin echo ""                       >> $RESULT
   builtin echo "====================="  >> $RESULT
   builtin echo  $MY_CMD "$@" $ARGOBJ    >> $RESULT
   builtin echo "====================="  >> $RESULT

   $CAT  $LINKLINE >> $RESULT
fi

$RM -rf $WRKDIR

exit $status

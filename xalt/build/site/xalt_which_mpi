#!/bin/bash
# -*- shell-script -*-
#
# Git Version: @git@

#-----------------------------------------------------------------------
# XALT: A tool to track the programs on a cluster.
# Copyright (C) 2013-2014 University of Texas at Austin
# Copyright (C) 2013-2014 University of Tennessee
# 
# This library is free software; you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as
# published by the Free Software Foundation; either version 2.1 of 
# the License, or (at your option) any later version. 
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser  General Public License for more details. 
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free
# Software Foundation, Inc., 59 Temple Place, Suite 330,
# Boston, MA 02111-1307 USA
#-----------------------------------------------------------------------
tracing_msg()
{
  if [ "$XALT_TRACING" = "yes" ]; then
    builtin echo ""    1>&2
    builtin echo "$@"  1>&2
  fi
}

findName()
{
  EXPR=expr
  if type -p gexpr ; then
    EXPR=gexpr
  fi

  tracing_msg "Testing for mvapich2 w/mpiname"
  if type -p mpiname ; then
    mpiN=`mpiname -n 2> /dev/null`
    mpiV=`mpiname -v 2> /dev/null`
    return
  fi

  tracing_msg "Testing for mpich2"
  if type -p mpich2version ; then
    mpiN=mpich2
    mpiV=`mpich2version | head -n 1`
    mpiV=`$EXPR "$mpiV" : '.*:\s\s*\(.*\)'`
    return
  fi 
  
  tracing_msg "Testing for mpich"
  if type -p mpichversion ; then
    mpiN=mpich
    mpiV=`mpichversion | head -n 1`
    mpiV=`$EXPR "$mpiV" : '.*:\s\s*\(.*\)'`
    return
  fi

  tracing_msg "Testing for SGI MPT"
  # this works with SGI MPT 2.01 on an SGI UV1000
  if type -p mpiexec_mpt ; then
    mpiexecPath=$(dirname `which mpiexec_mpt`)
    $mpiexecPath/mpirun -v > /tmp/mpi$$ 2>&1
    if [ $? = 0 ]; then
      mpiStr=`head -n 1 /tmp/mpi$$`
      if [[ $mpiStr =~ "SGI MPT" ]]; then
        mpiN="sgimpt"
        mpiV=`$EXPR "$mpiStr" : '.*SGI MPT\s\+\([^ ]\+\)\s'`
      fi
      rm /tmp/mpi$$
      return
    fi
    rm /tmp/mpi$$
  fi

  
  tracing_msg "Testing for OpenMPI using ompi_info"
  if type -p ompi_info ; then
     mpiV=$(ompi_info | grep -E "^\s+Open Mpi:" | sed -e 's/ *Open Mpi: //')
     mpiN="openmpi"
     return
  fi

  tracing_msg "Testing for OpenMPI/IMPI"
  mpiVerStr=$(mpiexec --version)
  if [ $? = 0 ]; then
    mpiStr=$(echo $mpiVerStr | head -n 1)
    if [[ $mpiStr =~ Intel ]]; then
      mpiN="impi"
      mpiV=`$EXPR "$mpiStr" : '.*Version\s\+\([^ ]\+\)\s'`
    else
      mpiN="openmpi"
      mpiV=`$EXPR "$mpiStr" : '.*)\s\+\(.*\)'`
    fi
    return
  fi

  for i in mpiexec mpiexec.hydra ; do
    if type -p $i ; then
      MPIEXEC=$i
    fi
  done
  
  tracing_msg "Testing for $MPIEXEC -info"
  var=$($MPIEXEC -info)
  if [ $? = 0 ]; then
    mpiN="mvapich2"
    mpiV=`$EXPR "$var" : '.*Version:\s\s*\([^ ]*\) '`
    return
  fi

  tracing_msg "Testing for $mpicc -v"
  var=$(mpicc -v 2> /dev/null)
  cmd=${var:0:5}
  if [ "$cmd" = mpicc ]; then
    mpiN="mvapich2"
    mpiV=`$EXPR "$var" : '.* \([^ ]*\)$'`
    return
  fi
}


mpiN="UnknownMPI"
mpiV="0.0"

findName > /dev/null

mpiFV=$mpiV
mpiV=$(echo $mpiV | sed -e 's/[PpRr].*//')

mpiA=($(echo $mpiV | tr '\.' ' '))
mpiV="${mpiA[0]}.${mpiA[1]}"


if [ "$1" = "-dumpversion" ]; then
  echo $mpiV
elif [ "$1" = "--name" ]; then
  echo $mpiN
else
  echo "$mpiN $mpiFV"
fi

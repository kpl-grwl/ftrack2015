#!/bin/bash
#-*- shell-script -*-
#
# Git Version: @git@


MY_PATH=$0
MY_NAME=$(basename $MY_PATH)

XALT_DIR=/sw/tools/xalt/builds/nautilus
RUN_SUBMIT=$XALT_DIR/libexec/xalt_run_submission.py
UUIDGEN=/usr/bin/uuidgen
WHICH_MPI=$XALT_DIR/site/xalt_which_mpi
SYSHOST=$($XALT_DIR/site/xalt_syshost.py)
EPOCH=$XALT_DIR/libexec/xalt_epoch.py
export JOB_ID=$($XALT_DIR/site/new_job_id.py)

MPI_STACK=$($WHICH_MPI --name)

case "$MPI_STACK" in
  mpich|mpich2)
    FIND_EXEC=$XALT_DIR/site/xalt_find_exec_mpich.py
    ;;
  openmpi)
    FIND_EXEC=$XALT_DIR/site/xalt_find_exec_openmpi.py
    ;;
  sgimpt)
    FIND_EXEC=$XALT_DIR/site/xalt_find_exec_sgimpt.py
    ;;
esac

EXEC="unknown"
if [ -x "$FIND_EXEC" ]; then
  EXEC=$($FIND_EXEC "$@")
fi

########################################################################
# Search for the command  and make sure that you don't find this one.
# We use "type -p -a" instead of searching the path.  Since bash should
# have search and cached all the executable in the path.  This should be
# faster then walking the path.  But only if this script is treated as a
# bash script.

if [ -n "$BASH_VERSION" ]; then
  for exe in $(type -p -a $MY_NAME); do
    if [ $exe != $MY_PATH ]; then
      MY_CMD=$exe
      break
    fi
  done
else
  ###################################################################
  # If this script is not treated as a bash script then do this the
  # old fashion way.

  OLD_IFS=$IFS
  IFS=:
  for dir in $PATH; do
    if [ $dir/$MY_NAME != $MY_PATH -a -x "$dir/$MY_NAME" ]; then
      MY_CMD="$dir/$MY_NAME"
    fi
  done
  IFS=$OLD_IFS
fi

########################################################################
# Loop over command line arguments to mpirun. This code is used instead of
# getopt and others because this wrapper script should not try to know
# all the options to ld. Instead we are just "cherry-picking" the options
# we want to know about.

NTASKS=1
append=false
prev=
done=false
for option; do
  if [ -n "$prev" ]; then
    eval "$prev=\$option"
    prev=
    continue
  fi

  case "$option" in
    -*=*) optarg=`builtin echo "$option" | sed  's/[-_a-zA-Z0-9]*=//'` ;;
    -*) optarg=;;
    *) optarg=; done=true;;
  esac
  
  case $option in
    --np|-n)
      prev='NTASKS'
      ;;
    --help|-h)
      $MY_CMD "$@"
      exit
      ;;
  esac

  #####################################################################
  # This code below is commented out.  Since this script is not parsing
  # all options the done flag won't work.

  #if [ "$done" = "true" ]; then
  #  break;
  #fi
done


RUN_UUID=`$UUIDGEN`
DATESTR=`date +%Y_%m_%d_%H_%M_%S`

runFn=$HOME/.xalt.d/run.${SYSHOST}.${DATESTR}.$RUN_UUID.json

sTime=$($EPOCH)
$RUN_SUBMIT --ntasks $NTASKS --start "$sTime" --end 0        --fn "$runFn" --run_uuid "$RUN_UUID" -- $EXEC

$MY_CMD "$@"

eTime=$($EPOCH)
$RUN_SUBMIT --ntasks $NTASKS --start "$sTime" --end "$eTime" --fn "$runFn" --run_uuid "$RUN_UUID" -- $EXEC


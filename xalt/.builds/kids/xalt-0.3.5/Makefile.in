package         := xalt
VERSION         := $(shell cat .version)
prefix          := @prefix@
XALT_DIR        := @prefix@
PATH_TO_UUIDGEN := @PATH_TO_UUIDGEN@
PATH_TO_AS      := @PATH_TO_AS@
PATH_TO_PSTREE  := @PATH_TO_PSTREE@
BUILD_PSTREE    := @BUILD_PSTREE@
USE_ARGPARSE    := @USE_CONTRIB_ARGPARSE@

GIT_PROG        := @PATH_TO_GIT@
GIT_VERSION     := $(shell if [ -n "$(GIT_PROG)" -a -d .git ]; then GV=`git describe --always`; echo "$$GV"; else echo "@git@"; fi)

LIBEXEC         := $(prefix)/libexec
SITE            := $(prefix)/site
BIN             := $(prefix)/bin
SBIN            := $(prefix)/sbin
DIRLIST         := $(DESTDIR)$(LIBEXEC) $(DESTDIR)$(SITE)  $(DESTDIR)$(BIN) \
                   $(DESTDIR)$(SBIN) 

BIN_PKG         := src/ld.in src/mpirun.in src/ibrun.in src/ibrun.symm.in


SBIN_PKG        := src/conf_create.in.py  	     src/createDB.in.py               \
                   src/xalt_db.conf       	     src/xalt_json_to_db.in.py

LIBEXEC_PKG     := src/xalt_generate_assembly.in.py  src/xalt_generate_linkdata.in.py \
                   src/xalt_run_submission.in.py     src/xalt_parse_mpirun_args.in.py \
                   src/util.py                       src/XALTdb.py                    \
                   src/progressBar.py                src/xalt_epoch.in.py

SITE_PKG        := src/xalt_find_exec_mpich.in.py    src/xalt_find_exec_openmpi.in.py \
	           src/xalt_which_mpi.in             src/xalt_syshost.in.py           \
                   src/new_job_id.in.py              src/SitePkg.py                   \
		   src/xalt_find_exec_ibrun.in.py

.PHONY:

all:
	@echo done

install:  $(DIRLIST) Inst_site Inst_sbin Inst_bin Inst_libexec      \
          Build_pstree_$(BUILD_PSTREE) Use_argparse_$(USE_ARGPARSE) \
          Use_getent_yes


$(DIRLIST) :
	mkdir -p $@

Inst_site: $(SITE_PKG)
	$(MAKE) FILELIST="$^" DIRLOC=$(DESTDIR)$(SITE)    __installMe

Inst_libexec: $(LIBEXEC_PKG)
	$(MAKE) FILELIST="$^" DIRLOC=$(DESTDIR)$(LIBEXEC) __installMe

Inst_sbin: $(SBIN_PKG)
	$(MAKE) FILELIST="$^" DIRLOC=$(DESTDIR)$(SBIN)    __installMe

Inst_bin: $(BIN_PKG)
	$(MAKE) FILELIST="$^" DIRLOC=$(DESTDIR)$(BIN)     __installMe

Build_pstree_no:

Build_pstree_yes:
	cd contrib;                                                       \
        tar xf psmisc-22.21.tar.gz;                                       \
        cd psmisc-22.21;                                                  \
        ./configure --prefix=$(prefix)/psmisc;                            \
        make;                                                             \
        make DESTDIR=$(DESTDIR) install;                                  \
        ln -s $(prefix)/psmisc/bin/pstree $(DESTDIR)$(prefix)/libexec;    \
	cd ..; rm -rf psmisc-22.21

Use_getent_yes:
	cd contrib;                                                       \
        mkdir -p  $(DESTDIR)$(prefix)/libexec/getent;                     \
        cp getent/*.py $(DESTDIR)$(prefix)/libexec/getent


Use_argparse_no:

Use_argparse_yes: contrib/argparse/argparse.py
	$(MAKE) FILELIST="$^" DIRLOC=$(DESTDIR)$(LIBEXEC) __installMe

__installMe:
	-for i in $(FILELIST); do                                     	   \
           bareN=$${i##*/};                                           	   \
           fn=$${bareN%%.in*};                                        	   \
           ext=$${bareN#*.};                                          	   \
           oext=;                                                          \
	   : echo "bareN: $$bareN, ext: $$ext"; \
           [ "$$ext" = "in.py" ] && oext=".py";                            \
           sed  -e 's|@PREFIX@|$(prefix)|g'                            	   \
	        -e 's|@xalt_dir@|$(XALT_DIR)|g'                 	   \
	        -e 's|@path_to_as@|$(PATH_TO_AS)|g'                        \
	        -e 's|@version@|$(VERSION)|g'                              \
	        -e 's|@git@|$(GIT_VERSION)|g'                              \
	        -e 's|@path_to_pstree@|$(PATH_TO_PSTREE)|g'                \
	        -e 's|@path_to_uuidgen@|$(PATH_TO_UUIDGEN)|g'              \
                           < $$i > $(DIRLOC)/$$fn$$oext;                   \
            [ "$$ext" = "in" -o "$$ext" = "symm.in" -o "$$ext" = "in.py" ] && \
               chmod +x $(DIRLOC)/$$fn$$oext;                              \
	    true;                                                          \
        done

world_update:
	@git status -s > /tmp/git_st_$$$$;                                 \
        if [ -s /tmp/git_st_$$$$ ]; then                                   \
            echo "All files not checked in => try again";                  \
        else                                                               \
            git push github;                                               \
            git push --tags github;                                        \
        fi;                                                                \
        rm -f /tmp/git_st_$$$$

gittag:
        ifneq ($(TAG),)
	  @git status -s > /tmp/git_st_$$$$;                               \
          if [ -s /tmp/git_st_$$$$ ]; then                                 \
	    echo "All files not checked in => try again";                  \
	  else                                                             \
	    echo "$(TAG)" >                                      .version; \
            git commit -m "moving to TAG_VERSION $(TAG)"         .version; \
            git tag -a $(TAG) -m 'Setting TAG_VERSION to $(TAG)'         ; \
	    git push --tags                                              ; \
          fi;                                                              \
          rm -f /tmp/git_st_$$$$
        else
	  @echo "To git tag do: make gittag TAG=?"
        endif

dist:
	git archive --prefix=xalt-`cat .version`/ master | bzip2 > xalt-`cat .version`.tar.bz2


makefile: Makefile.in config.status
	./config.status $@

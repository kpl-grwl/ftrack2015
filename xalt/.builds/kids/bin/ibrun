#!/bin/bash
#-*- shell-script -*-
#
#  Git Version: @git@

MY_PATH=$0
MY_NAME=$(basename $MY_PATH)

XALT_DIR=/sw/tools/xalt/builds/kids
RUN_SUBMIT=$XALT_DIR/libexec/xalt_run_submission.py
UUIDGEN=/usr/bin/uuidgen
SYSHOST=$($XALT_DIR/site/xalt_syshost.py)
EPOCH=$XALT_DIR/libexec/xalt_epoch.py

FIND_EXEC=$XALT_DIR/site/xalt_find_exec_ibrun.py
MY_CMD=/usr/local/bin/ibrun

EXEC="unknown"
if [ -x "$FIND_EXEC" ]; then
  EXEC=$($FIND_EXEC "$@")
fi

########################################################################
# Search for the command  and make sure that you don't find this one.
# We use "type -p -a" instead of searching the path.  Since bash should
# have search and cached all the executable in the path.  This should be
# faster then walking the path.  But only if this script is treated as a
# bash script.

if [ -n "$BASH_VERSION" ]; then
  for exe in $(type -p -a $MY_NAME); do
    if [ $exe != $MY_PATH ]; then
      MY_CMD=$exe
      break
    fi
  done
else
  ###################################################################
  # If this script is not treated as a bash script then do this the
  # old fashion way.

  OLD_IFS=$IFS
  IFS=:
  for dir in $PATH; do
    if [ $dir/$MY_NAME != $MY_PATH -a -x "$dir/$MY_NAME" ]; then
      MY_CMD="$dir/$MY_NAME"
    fi
  done
  IFS=$OLD_IFS
fi

RUN_UUID=`$UUIDGEN`
DATESTR=`date +%Y_%m_%d_%H_%M_%S`

runFn=$HOME/.xalt.d/run.${SYSHOST}.${DATESTR}.$RUN_UUID.json

sTime=$($EPOCH)
$RUN_SUBMIT --start "$sTime" --end 0        --fn "$runFn" --run_uuid "$RUN_UUID" -- $EXEC

$MY_CMD "$@"

eTime=$($EPOCH)
$RUN_SUBMIT --start "$sTime" --end "$eTime" --fn "$runFn" --run_uuid "$RUN_UUID" -- $EXEC

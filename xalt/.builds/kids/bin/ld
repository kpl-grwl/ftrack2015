#!/bin/bash
#-*- shell-script -*-
#
# Git Version: @git@

MY_PATH=$0
MY_NAME=$(basename $MY_PATH)

XALT_DIR=/sw/tools/xalt/builds/kids
GEN_ASSEMBLY=$XALT_DIR/libexec/xalt_generate_assembly.py
GEN_LINKDATA=$XALT_DIR/libexec/xalt_generate_linkdata.py
SYS_HOST_CMD=$XALT_DIR/site/xalt_syshost.py
PSTREE=/sw/tools/xalt/builds/kids/libexec/pstree

SYSHOST=$($SYS_HOST_CMD)

AS=/usr/bin/as
UUIDGEN=/usr/bin/uuidgen

########################################################################
# Search for the command  and make sure that you don't find this one.
# We use "type -p -a" instead of searching the path.  Since bash should
# have search and cached all the executable in the path.  This should be
# faster then walking the path.  But only if this script is treated as a
# bash script.

if [ -n "$BASH_VERSION" ]; then
  for exe in $(type -p -a $MY_NAME); do
    if [ $exe != $MY_PATH ]; then
      MY_CMD=$exe
      break
    fi
  done
else
  ###################################################################
  # If this script is not treated as a bash script then do this the
  # old fashion way.

  OLD_IFS=$IFS
  IFS=:
  for dir in $PATH; do
    if [ $dir/$MY_NAME != $MY_PATH -a -x "$dir/$MY_NAME" ]; then
      MY_CMD="$dir/$MY_NAME"
    fi
  done
  IFS=$OLD_IFS
fi

########################################################################
# Loop over command line arguments to ld. This code is used instead of
# getopt and others because this wrapper script should not try to know
# all the options to ld. Instead we are just "cherry-picking" the options
# we want to know about.

EXEC="a.out"
append=false
prev=
done=false
for option
do
  if [ -n "$prev" ]; then
    eval "$prev=\$option"
    prev=
    continue
  fi

  case "$option" in
    -*=*) optarg=`builtin echo "$option" | sed  's/[-_a-zA-Z0-9]*=//'` ;;
    -*) optarg=;;
    *) optarg=; done=true;;
  esac
  
  case $option in
    --version|-v|--help)
      $MY_CMD "$@"
      exit
      ;;
    -o)
      prev='EXEC'
      ;;
  esac

  #####################################################################
  # This code below is commented out.  Since this script is not parsing
  # all options the done flag won't work.

  #if [ "$done" = "true" ]; then
  #  break;
  #fi

done

UUID=`$UUIDGEN`
DATESTR=`date +%Y_%m_%d_%H_%M_%S`
WRKDIR=/tmp/${USER}_${DATESTR}_${UUID}
LINKLINE=$WRKDIR/link.txt
ARGSRC=$WRKDIR/xalt.s
ARGOBJ=$WRKDIR/xalt.o
RESULT=$HOME/.xalt.d/link.${SYSHOST}.${DATESTR}.$UUID.json

if [ ! -d $WRKDIR ]; then
  mkdir -p $WRKDIR
fi

PSTREE_OUT="unknown"
if [ -x "$PSTREE" ]; then
  PSTREE_OUT=$($PSTREE -l -s $$)
fi

EPOCH=$($GEN_ASSEMBLY $UUID $SYSHOST $PSTREE_OUT $ARGSRC)

$AS $ARGSRC -o $ARGOBJ

$MY_CMD "$@" $ARGOBJ -t > $LINKLINE

STATUS=$?

$GEN_LINKDATA $UUID $STATUS `pwd` $SYSHOST $PSTREE_OUT $EXEC $ARGOBJ $EPOCH $LINKLINE $RESULT

if [ "$?" = 0 -a -n "$XALT_LD_DEBUG" ]; then
   echo ""                       >> $RESULT
   echo "====================="  >> $RESULT
   echo  $MY_CMD "$@" $ARGOBJ    >> $RESULT
   echo "====================="  >> $RESULT

   cat  $LINKLINE >> $RESULT
fi

rm -rf $WRKDIR

exit $STATUS
